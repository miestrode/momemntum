{% import "common" as macros %}

@group(0) @binding(0)
var<storage, read_write> output: array<f32>;

{% for input in inputs %}
    @group(0) @binding({{ loop.index }})
    var<storage> {{ input }}: array<f32>;
{% endfor %}

@compute @workgroup_size({{ workgroup_size_x }})
fn main(@builtin(global_invocation_id) global_id: vec3<u32>) {
    let index = global_id.x;

    if index < {{ layouts["output"]["elements"] }}u {
        {% for input in inputs %}
            {{
                macros::get_index(
                    old_index="index",
                    old_strides=layouts["output"]["strides"],
                    new_strides=layouts[input]["strides"],
                    new_index="index_" ~ input
                )
            }}

            let elem_{{ input }} = {{ input }}[index_{{ input }}];
        {% endfor %}

        output[index] = {{ expr }};
    }
}
